{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Benson\\\\Desktop\\\\ohmies.fyi\\\\src\\\\components\\\\Sidebar\\\\Sidebar.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\nimport { PropTypes } from \"prop-types\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\nimport { BackgroundColorContext, backgroundColors } from \"contexts/BackgroundColorContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ps;\n\nfunction Sidebar(props) {\n  _s();\n\n  var _this = this;\n\n  var location = useLocation();\n  var sidebarRef = React.useRef(null); // verifies if routeName is the one active (in browser input)\n\n  var activeRoute = function activeRoute(routeName) {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n\n  React.useEffect(function () {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false\n      });\n    } // Specify how to clean up after this effect:\n\n\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n\n  var linkOnClick = function linkOnClick() {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n\n  var routes = props.routes,\n      rtlActive = props.rtlActive,\n      logo = props.logo;\n  var logoImg = null;\n  var logoText = null;\n\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-mini\",\n        target: \"_blank\",\n        onClick: props.toggleSidebar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo.imgSrc,\n            alt: \"react-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n      logoText = /*#__PURE__*/_jsxDEV(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-normal\",\n        target: \"_blank\",\n        onClick: props.toggleSidebar,\n        children: logo.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    } else {\n      logoImg = /*#__PURE__*/_jsxDEV(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-mini\",\n        onClick: props.toggleSidebar,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo.imgSrc,\n            alt: \"react-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n      logoText = /*#__PURE__*/_jsxDEV(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-normal\",\n        onClick: props.toggleSidebar,\n        children: logo.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(BackgroundColorContext.Consumer, {\n    children: function children(_ref) {\n      var color = _ref.color;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        data: color,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-wrapper\",\n          ref: sidebarRef,\n          children: [logoImg !== null || logoText !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo\",\n            children: \"     \" + logoText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, _this) : null, /*#__PURE__*/_jsxDEV(Nav, {\n            children: routes.map(function (prop, key) {\n              if (prop.redirect) return null;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                className: activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\"),\n                children: /*#__PURE__*/_jsxDEV(NavLink, {\n                  to: prop.layout + prop.path,\n                  className: \"nav-link\",\n                  activeClassName: \"active\",\n                  onClick: props.toggleSidebar,\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: prop.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 23\n                  }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: rtlActive ? prop.rtlName : prop.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 23\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 21\n                }, _this)\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Sidebar, \"D7Jqss+EaZ4C9XG5NUxwx/SUfWU=\", false, function () {\n  return [useLocation];\n});\n\n_c = Sidebar;\nSidebar.defaultProps = {\n  rtlActive: false,\n  routes: [{}]\n};\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  rtlActive: PropTypes.bool,\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string\n  })\n};\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["C:/Users/Benson/Desktop/ohmies.fyi/src/components/Sidebar/Sidebar.js"],"names":["React","NavLink","Link","useLocation","PropTypes","PerfectScrollbar","Nav","ReactstrapNavLink","BackgroundColorContext","backgroundColors","ps","Sidebar","props","location","sidebarRef","useRef","activeRoute","routeName","pathname","useEffect","navigator","platform","indexOf","current","suppressScrollX","suppressScrollY","cleanup","destroy","linkOnClick","document","documentElement","classList","remove","routes","rtlActive","logo","logoImg","logoText","undefined","outterLink","toggleSidebar","imgSrc","text","innerLink","color","map","prop","key","redirect","path","pro","layout","icon","rtlName","name","defaultProps","propTypes","bool","arrayOf","object","shape","string","node"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\n\nimport { PropTypes } from \"prop-types\";\n\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\nimport {\n  BackgroundColorContext,\n  backgroundColors,\n} from \"contexts/BackgroundColorContext\";\n\nvar ps;\n\nfunction Sidebar(props) {\n  const location = useLocation();\n  const sidebarRef = React.useRef(null);\n  // verifies if routeName is the one active (in browser input)\n  const activeRoute = (routeName) => {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n  React.useEffect(() => {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false,\n      });\n    }\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n  const linkOnClick = () => {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n  const { routes, rtlActive, logo } = props;\n  let logoImg = null;\n  let logoText = null;\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-mini\"\n          target=\"_blank\"\n          onClick={props.toggleSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </a>\n      );\n      logoText = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-normal\"\n          target=\"_blank\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n        </a>\n      );\n    } else {\n      logoImg = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-mini\"\n          onClick={props.toggleSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </Link>\n      );\n      logoText = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-normal\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n        </Link>\n      );\n    }\n  }\n  return (\n    <BackgroundColorContext.Consumer>\n      {({ color }) => (\n        <div className=\"sidebar\" data={color}>\n          <div className=\"sidebar-wrapper\" ref={sidebarRef}>\n            {logoImg !== null || logoText !== null ? (\n              <div className=\"logo\">\n                {\"     \" + logoText}\n              </div>\n            ) : null}\n            <Nav>\n              {routes.map((prop, key) => {\n                if (prop.redirect) return null;\n                return (\n                  <li\n                    className={\n                      activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\")\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      to={prop.layout + prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                      onClick={props.toggleSidebar}\n                    >\n                      <i className={prop.icon} />\n                      <p>{rtlActive ? prop.rtlName : prop.name}</p>\n                    </NavLink>\n                  </li>\n                );\n              })}\n            </Nav>\n          </div>\n        </div>\n      )}\n    </BackgroundColorContext.Consumer>\n  );\n}\n\nSidebar.defaultProps = {\n  rtlActive: false,\n  routes: [{}],\n};\n\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  rtlActive: PropTypes.bool,\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string,\n  }),\n};\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}